#include <iostream>
#include <vector>
#include <pthread.h>
#include <cstdlib>
#include <fstream>
#include <chrono>

#define N 500  // Matrix size
#define NUM_THREADS 4  // Number of threads

using namespace std;
using namespace chrono;

// Define matrices globally
vector<vector<int>> A(N, vector<int>(N));
vector<vector<int>> B(N, vector<int>(N));
vector<vector<int>> C(N, vector<int>(N, 0));

// Function to generate random values for matrices
void generateRandomMatrix(vector<vector<int>>& matrix) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            matrix[i][j] = rand() % 10; // Random values between 0-9
        }
    }
}

// Struct to pass data to threads
struct ThreadData {
    int startRow;
    int endRow;
};

// Thread function for matrix multiplication
void* multiplyPart(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    int startRow = data->startRow;
    int endRow = data->endRow;

    for (int i = startRow; i < endRow; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
    pthread_exit(nullptr);
}

int main() {
    srand(time(0));

    // Initialize matrices
    generateRandomMatrix(A);
    generateRandomMatrix(B);

    // Start measuring execution time
    auto start_time = high_resolution_clock::now();

    // Create threads
    pthread_t threads[NUM_THREADS];
    ThreadData threadData[NUM_THREADS];

    int rowsPerThread = N / NUM_THREADS;
    for (int i = 0; i < NUM_THREADS; i++) {
        threadData[i].startRow = i * rowsPerThread;
        threadData[i].endRow = (i == NUM_THREADS - 1) ? N : (i + 1) * rowsPerThread;
        pthread_create(&threads[i], nullptr, multiplyPart, (void*)&threadData[i]);
    }

    // Join threads
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], nullptr);
    }

    // Stop measuring execution time
    auto end_time = high_resolution_clock::now();

    // Print execution time
    cout << "Execution Time (Parallel): " << duration_cast<milliseconds>(end_time - start_time).count() << " ms" << endl;

    // Save result to file
    ofstream outputFile("output_parallel.txt");
    for (const auto& row : C) {
        for (int val : row) {
            outputFile << val << " ";
        }
        outputFile << "\n";
    }
    outputFile.close();

    return 0;
}
