#include <iostream>
#include <vector>
#include <omp.h>

#define N 700  // Matrix size

using namespace std;

void multiplyMatrices(const vector<vector<int>>& A, const vector<vector<int>>& B, vector<vector<int>>& C) {
    #pragma omp parallel for
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            C[i][j] = 0;
            for (int k = 0; k < N; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    vector<vector<int>> A(N, vector<int>(N, 1));
    vector<vector<int>> B(N, vector<int>(N, 1));
    vector<vector<int>> C(N, vector<int>(N, 0));

    double start_time = omp_get_wtime();
    multiplyMatrices(A, B, C);
    double end_time = omp_get_wtime();

    cout << "Execution Time: " << (end_time - start_time) * 1000 << " ms" << endl;
    return 0;
}


