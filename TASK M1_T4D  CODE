#include <mpi.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <unordered_map>
#include <queue>
#include <vector>
#include <string>
#include <ctime>
#include <iomanip>

using namespace std;

struct TrafficRecord {
    int hour;
    int signalID;
    int cars;
};

int extractHour(const string& timestamp) {
    struct tm timeinfo = {};
    istringstream ss(timestamp);
    ss >> get_time(&timeinfo, "%Y-%m-%d %H:%M:%S");
    return timeinfo.tm_hour;
}

void master(const string& filename, int size, int N) {
    ifstream file(filename);
    string line;
    int dest = 1;
    MPI_Request send_request;

    while (getline(file, line)) {
        MPI_Isend(line.c_str(), line.length() + 1, MPI_CHAR, dest, 0, MPI_COMM_WORLD, &send_request);
        dest = (dest % (size - 1)) + 1;
    }

    // Send termination signal to all workers
    string end_msg = "END";
    for (int i = 1; i < size; i++) {
        MPI_Isend(end_msg.c_str(), end_msg.length() + 1, MPI_CHAR, i, 0, MPI_COMM_WORLD, &send_request);
    }

    // Receive partial results
    unordered_map<int, unordered_map<int, int>> global_map; // hour -> signalID -> count

    for (int i = 1; i < size; ++i) {
        int size_of_data;
        MPI_Recv(&size_of_data, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        for (int j = 0; j < size_of_data; ++j) {
            int hour, signalID, count;
            MPI_Recv(&hour, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            MPI_Recv(&signalID, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            MPI_Recv(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            global_map[hour][signalID] += count;
        }
    }

    // Print top N for each hour
    for (auto& [hour, signalMap] : global_map) {
        cout << "Hour: " << hour << "\n";
        priority_queue<pair<int, int>> pq;

        for (auto& [signal, count] : signalMap) {
            pq.push({count, signal});
        }

        for (int i = 0; i < N && !pq.empty(); ++i) {
            auto top = pq.top(); pq.pop();
            cout << "TL" << top.second << " - " << top.first << " cars\n";
        }
        cout << "------------------\n";
    }
}

void worker(int rank) {
    unordered_map<int, unordered_map<int, int>> hour_signal_map;
    MPI_Request recv_request;
    char buffer[256];

    while (true) {
        MPI_Recv(&buffer, 256, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        string msg(buffer);
        if (msg == "END") break;

        istringstream ss(msg);
        string timestamp, signalStr, carStr;

        getline(ss, timestamp, ',');
        getline(ss, signalStr, ',');
        getline(ss, carStr, ',');

        int hour = extractHour(timestamp);
        int signal = stoi(signalStr);
        int cars = stoi(carStr);

        hour_signal_map[hour][signal] += cars;
    }

    // Send aggregated data
    int data_size = 0;
    for (auto& hourEntry : hour_signal_map)
        data_size += hourEntry.second.size();

    MPI_Send(&data_size, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);

    for (auto& [hour, signalMap] : hour_signal_map) {
        for (auto& [signal, count] : signalMap) {
            MPI_Send(&hour, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            MPI_Send(&signal, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
            MPI_Send(&count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        }
    }
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (argc < 3) {
        if (rank == 0)
            cerr << "Usage: " << argv[0] << " <data_file> <TopN>\n";
        MPI_Finalize();
        return 1;
    }

    string filename = argv[1];
    int topN = stoi(argv[2]);

    if (rank == 0)
        master(filename, size, topN);
    else
        worker(rank);

    MPI_Finalize();
    return 0;
}
