#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <omp.h>

using namespace std;
using namespace chrono;

const int THRESHOLD = 10000; // Below this, use sequential sorting

void quickSort(int arr[], int low, int high);
void parallelQuickSort(int arr[], int low, int high);
int partition(int arr[], int low, int high);

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

void parallelQuickSort(int arr[], int low, int high) {
    if (low < high) {
        if (high - low < THRESHOLD) {
            quickSort(arr, low, high); // Use sequential sorting for small arrays
            return;
        }
        int pivotIndex = partition(arr, low, high);

        #pragma omp parallel
        {
            #pragma omp single nowait
            {
                #pragma omp task
                parallelQuickSort(arr, low, pivotIndex - 1);
                #pragma omp task
                parallelQuickSort(arr, pivotIndex + 1, high);
            }
        }
    }
}

int partition(int arr[], int low, int high) {
    int pivotIndex = low + rand() % (high - low + 1);
    swap(arr[pivotIndex], arr[high]); // Move pivot to the end
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

int main() {
    const int size = 1000000; // Adjust size as needed
    int* arr = new int[size]; // Use heap allocation for large arrays
    srand(time(0));

    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 100000;
    }

    auto start = high_resolution_clock::now();
    parallelQuickSort(arr, 0, size - 1);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<milliseconds>(stop - start);

    cout << "Execution Time (Parallel): " << duration.count() << " ms" << endl;

    delete[] arr; // Free memory
    return 0;
}
