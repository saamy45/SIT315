#include <mpi.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;
using namespace chrono;

void randomVector(int* vector, int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

int main(int argc, char* argv[]) {
    int rank, size;
    const int totalSize = 1000000;  
    int* v1 = nullptr;
    int* v2 = nullptr;
    int* v3 = nullptr;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (totalSize % size != 0) {
        if (rank == 0)
            cout << "Vector size must be divisible by number of processes." << endl;
        MPI_Finalize();
        return 1;
    }

    int chunkSize = totalSize / size;
    int* local_v1 = new int[chunkSize];
    int* local_v2 = new int[chunkSize];
    int* local_v3 = new int[chunkSize];

    if (rank == 0) {
        v1 = new int[totalSize];
        v2 = new int[totalSize];
        v3 = new int[totalSize];
        srand(time(0));
        randomVector(v1, totalSize);
        randomVector(v2, totalSize);
    }
    MPI_Barrier(MPI_COMM_WORLD);
    auto start = high_resolution_clock::now();

    MPI_Scatter(v1, chunkSize, MPI_INT, local_v1, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(v2, chunkSize, MPI_INT, local_v2, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < chunkSize; i++) {
        local_v3[i] = local_v1[i] + local_v2[i];
    }

    MPI_Gather(local_v3, chunkSize, MPI_INT, v3, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);

    auto end = high_resolution_clock::now();
    double elapsed = duration_cast<milliseconds>(end - start).count();

    if (rank == 0) {
        cout << "✅ Vector addition complete using MPI Scatter and Gather" << endl;
        cout << "⏱️ Time taken: " << elapsed << " milliseconds" << endl;
        cout << "Sample v3[0..4]: ";
        for (int i = 0; i < 5; i++)
            cout << v3[i] << " ";
        cout << endl;

        delete[] v1;
        delete[] v2;
        delete[] v3;
    }
    delete[] local_v1;
    delete[] local_v2;
    delete[] local_v3;
    MPI_Finalize();
    return 0;
}
