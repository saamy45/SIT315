#include <mpi.h>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;
using namespace std::chrono;

void randomVector(int* vector, int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }}

int main(int argc, char* argv[]) {
    int rank, size;
    const int totalSize = 10000000; // 10 million to avoid OOM
    int* v1 = nullptr, *v2 = nullptr, *v3 = nullptr;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Check divisibility
    if (totalSize % size != 0) {
        if (rank == 0) {
            cout << "Vector size must be divisible by number of processes." << endl;
        }
        MPI_Finalize();
        return 1;
    }

    int chunkSize = totalSize / size;
    int* local_v1 = (int*)malloc(chunkSize * sizeof(int));
    int* local_v2 = (int*)malloc(chunkSize * sizeof(int));
    int* local_v3 = (int*)malloc(chunkSize * sizeof(int));
    if (rank == 0) {
        v1 = (int*)malloc(totalSize * sizeof(int));
        v2 = (int*)malloc(totalSize * sizeof(int));
        v3 = (int*)malloc(totalSize * sizeof(int));
        srand(time(0));
        randomVector(v1, totalSize);
        randomVector(v2, totalSize);
    }

    MPI_Barrier(MPI_COMM_WORLD);
    auto start = high_resolution_clock::now();
    MPI_Scatter(v1, chunkSize, MPI_INT, local_v1, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(v2, chunkSize, MPI_INT, local_v2, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < chunkSize; i++) {
        local_v3[i] = local_v1[i] + local_v2[i];
    }

    MPI_Gather(local_v3, chunkSize, MPI_INT, v3, chunkSize, MPI_INT, 0, MPI_COMM_WORLD);
    int local_sum = 0;
    for (int i = 0; i < chunkSize; i++) {
        local_sum += local_v3[i];
    }

    int global_sum = 0;
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Barrier(MPI_COMM_WORLD);
    auto stop = high_resolution_clock::now();

    if (rank == 0) {
        auto duration = duration_cast<milliseconds>(stop - start);
        cout << "Final sum of all elements in vector3: " << global_sum << endl;
        cout << "Total time taken for MPI execution: " << duration.count() << " milliseconds" << endl;
        free(v1);
        free(v2);
        free(v3);
    }
    free(local_v1);
    free(local_v2);
    free(local_v3);
    MPI_Finalize();
    return 0;
}
