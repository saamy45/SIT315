#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <mpi.h>
#include <CL/cl.hpp>

#define ELEMENTS 1000000
#define GROUP_SIZE 256
#define LOCAL_ELEMENTS GROUP_SIZE

int main(int argc, char *argv[])
{
    int proc_id, proc_count;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &proc_id);
    MPI_Comm_size(MPI_COMM_WORLD, &proc_count);

    srand(time(NULL) + proc_id);

    int chunk_size = ELEMENTS / proc_count;
    int chunk_data[chunk_size];
    for (int i = 0; i < chunk_size; i++)
    {
        chunk_data[i] = rand() % 20;
    }

    cl::Context gpu_context(CL_DEVICE_TYPE_GPU);
    std::vector<cl::Device> gpu_devices = gpu_context.getInfo<CL_CONTEXT_DEVICES>();
    cl::CommandQueue cmd_queue(gpu_context, gpu_devices[0]);

    cl::Buffer buf_input(gpu_context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, chunk_size * sizeof(int), chunk_data);
    cl::Buffer buf_output(gpu_context, CL_MEM_WRITE_ONLY, sizeof(int));

    cl::Program cl_program(gpu_context, 
        "#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n"
        "__kernel void compute_sum(__global int *input, __global int *output, const int local_size) { \n"
        "int total = 0; \n"
        "__global int *data = input + get_global_id(0) * local_size; \n"
        "for (int i = 0; i < local_size; i++) { \n"
        "total += data[i]; \n"
        "} \n"
        "atom_add(output, total); \n"
        "}");

    cl_program.build(gpu_devices);
    cl::Kernel cl_kernel(cl_program, "compute_sum");

    cl_kernel.setArg(0, buf_input);
    cl_kernel.setArg(1, buf_output);
    cl_kernel.setArg(2, chunk_size);

    cmd_queue.enqueueNDRangeKernel(cl_kernel, cl::NullRange, cl::NDRange(chunk_size / GROUP_SIZE), cl::NDRange(GROUP_SIZE));

    int partial_sum;
    cmd_queue.enqueueReadBuffer(buf_output, CL_TRUE, 0, sizeof(int), &partial_sum);

    long total_sum;
    MPI_Reduce(&partial_sum, &total_sum, 1, MPI_LONG, MPI_SUM, 0, MPI_COMM_WORLD);

    if (proc_id == 0)
    {
        std::cout << "Final sum = " << total_sum << std::endl;
    }

    MPI_Finalize();
    return 0;
}
