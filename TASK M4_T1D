#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#define NUM_CYCLES 10
#define ALERT_TEMP 40.0
#define ALERT_SMOKE 300
#define ALERT_MOTION 1

void generate_sensor_data(float *temperature, int *smoke, int *motion) {
    *temperature = (rand() % 5000) / 100.0; // 0 - 50°C
    *smoke = rand() % 500;                 // 0 - 500 ppm
    *motion = rand() % 2;                  // 0 (no motion), 1 (motion detected)
}
int main(int argc, char** argv) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    srand(time(NULL) + rank);

    float temperature;
    int smoke, motion;
    float data[5]; // [cycle, temperature, smoke, motion, sensor_id]

    FILE *log_file;

    if (rank == 0) {
        // Master process
        log_file = fopen("home_monitor_log.csv", "w");
        if (!log_file) {
            printf("Error opening log file.\n");
            MPI_Finalize();
            return 1;
        }
        fprintf(log_file, "Cycle,SensorID,Temperature,SmokePPM,MotionDetected\n");
        printf("Master: Home Monitoring System Started\n");
        for (int cycle = 1; cycle <= NUM_CYCLES; cycle++) {
            printf("\nCycle %d:\n", cycle);
            for (int src = 1; src < size; src++) {
                MPI_Recv(data, 5, MPI_FLOAT, src, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

                printf("Sensor %d -> Temp: %.2f°C, Smoke: %.0f ppm, Motion: %s\n",
                    (int)data[4], data[1], data[2], ((int)data[3] == 1 ? "YES" : "NO"));

                fprintf(log_file, "%d,%d,%.2f,%.0f,%d\n",
                    cycle, (int)data[4], data[1], data[2], (int)data[3]);

                // Alert logic
                if (data[1] > ALERT_TEMP)
                    printf("  ALERT: High Temperature at Sensor %d!\n", (int)data[4]);
                if ((int)data[2] > ALERT_SMOKE)
                    printf("  ALERT: Smoke Detected at Sensor %d!\n", (int)data[4]);
                if ((int)data[3] == ALERT_MOTION)
                    printf("  ALERT: Motion Detected at Sensor %d!\n", (int)data[4]);
            }
            sleep(2); // Delay between cycles
        }
        fclose(log_file);
        printf("\nLogs saved to home_monitor_log.csv\n");
    } else {
        // Sensor processes
        for (int cycle = 1; cycle <= NUM_CYCLES; cycle++) {
            generate_sensor_data(&temperature, &smoke, &motion);
            data[0] = (float)cycle;
            data[1] = temperature;
            data[2] = (float)smoke;
            data[3] = (float)motion;
            data[4] = (float)rank;
            MPI_Send(data, 5, MPI_FLOAT, 0, 0, MPI_COMM_WORLD);
            sleep(2); // Sensor interval
        }}
    MPI_Finalize();
    return 0;
}
